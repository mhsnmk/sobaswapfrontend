{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","useApproveFarm","lpContract","masterChefContract","useMasterchef","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","onTransactionSubmitted","onSuccess","onError","a","ethers","constants","MaxUint256","tx","wait","receipt","status","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","pid","account","useWeb3React","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","sobaPrice","usePriceSobaBusd","dispatch","useAppDispatch","rawEarningsBalance","getBalanceAmount","BIG_ZERO","displayBalance","toFixed","BigNumber","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","eq","Balance","fontSize","decimals","value","unit","prefix","disabled","Toast","txHash","hash","transactionHash","logError","fetchFarmUserDataAsync","pids","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceUnits","parseUnits","formatBigNumber","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","val","setVal","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","Number","isFinite","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useLpTokenPrice","handleStake","handleUnstake","stakedBalanceBigNumber","lt","useModal","onPresentDeposit","onPresentWithdraw","getBalanceNumber","some","item","pathname","includes","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","sobaRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","Loading","src","alt"],"mappings":"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","file":"static/js/8.13643522.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from 'opsoba-uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from 'opsoba-uikit'\nimport { Token } from 'opsoba-sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(\n    async (\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n      } else {\n        onError(receipt)\n      }\n    },\n    [lpContract, masterChefContract, callWithGasPrice],\n  )\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { TransactionReceipt } from '@ethersproject/abstract-provider/src.ts/index'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(\n    async (\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      const tx = await harvestFarm(masterChefContract, farmPid)\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n      } else {\n        onError(receipt)\n      }\n    },\n    [farmPid, masterChefContract],\n  )\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import { Button, Flex, Heading } from 'opsoba-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport React, { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceSobaBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const sobaPrice = usePriceSobaBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(sobaPrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward(\n              (tx) => {\n                toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n              },\n              (receipt) => {\n                toastSuccess(\n                  `${t('Harvested')}!`,\n                  <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                    {t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'SOBA' })}\n                  </ToastDescriptionWithTx>,\n                )\n              },\n              (receipt) => {\n                toastError(\n                  t('Error'),\n                  <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                    {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n                  </ToastDescriptionWithTx>,\n                )\n              },\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            logError(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  // placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton, Skeleton } from 'opsoba-uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport { logError } from 'utils/sentry'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  sobaPrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  sobaPrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: sobaPrice.toNumber(),\n  })\n\n  const annualRoi = sobaPrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={sobaPrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        {Number.isFinite(annualRoi) ? (\n          <AnnualRoiContainer\n            alignItems=\"center\"\n            onClick={() => {\n              setShowRoiCalculator(true)\n            }}\n          >\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        ) : (\n          <Skeleton width={60} />\n        )}\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              logError(e)\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'opsoba-uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { logError } from 'utils/sentry'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              onDismiss()\n            } catch (e) {\n              logError(e)\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (\n      amount: string,\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      const tx = await unstakeFarm(masterChefContract, pid, amount)\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n      } else {\n        onError(receipt)\n      }\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (\n      amount: string,\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      const tx = await stakeFarm(masterChefContract, pid, amount)\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n      } else {\n        onError(receipt)\n      }\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'opsoba-uikit'\nimport useToast from 'hooks/useToast'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  sobaPrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  sobaPrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleStake = async (amount: string) => {\n    await onStake(\n      amount,\n      (tx) => {\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      },\n      (receipt) => {\n        toastSuccess(\n          `${t('Staked')}!`,\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your funds have been staked in the farm')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n      (receipt) => {\n        toastError(\n          t('Error'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n    )\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(\n      amount,\n      (tx) => {\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      },\n      (receipt) => {\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your earnings have also been harvested to your wallet')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n      (receipt) => {\n        toastError(\n          t('Error'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n    )\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      sobaPrice={sobaPrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { Button, Flex, Text } from 'opsoba-uikit'\nimport BigNumber from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport React, { useCallback, useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { logError } from 'utils/sentry'\nimport useApproveFarm from '../../hooks/useApproveFarm'\nimport HarvestAction from './HarvestAction'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  sobaPrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, sobaPrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove(\n        (tx) => {\n          toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        },\n        (receipt) => {\n          toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n        },\n        (receipt) => {\n          toastError(\n            t('Error'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n            </ToastDescriptionWithTx>,\n          )\n        },\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      logError(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError, toastSuccess])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        sobaPrice={sobaPrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          SOBA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from 'opsoba-uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  sobaPrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  sobaPrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={sobaPrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from 'opsoba-uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  sobaPrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, sobaPrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('SOBA', 'SOBA')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('SOBA + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'SOBA'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  sobaPrice={sobaPrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          sobaPrice={sobaPrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from 'opsoba-uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  sobaPrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  sobaPrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          sobaPrice={sobaPrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'opsoba-uikit'\nimport { Token } from 'opsoba-sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","/* eslint-disable react/no-unused-prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'opsoba-uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of SOBA rewards each farm receives, as a proportion of the SOBA produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 SOBA per block, a 40x farm would receive 40 SOBA per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import { Button, Heading, Skeleton, Text } from 'opsoba-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport React, { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceSobaBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const sobaPrice = usePriceSobaBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(sobaPrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          SOBA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward(\n                (tx) => {\n                  toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n                },\n                (receipt) => {\n                  toastSuccess(\n                    `${t('Harvested')}!`,\n                    <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                      {t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'SOBA' })}\n                    </ToastDescriptionWithTx>,\n                  )\n                },\n                (receipt) => {\n                  toastError(\n                    t('Error'),\n                    <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                      {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n                    </ToastDescriptionWithTx>,\n                  )\n                },\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              logError(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import { AddIcon, Button, Heading, IconButton, MinusIcon, Skeleton, Text, useModal } from 'opsoba-uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport React, { useCallback, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useFarmUser, useLpTokenPrice, usePriceSobaBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { logError } from 'utils/sentry'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const sobaPrice = usePriceSobaBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(\n      amount,\n      (tx) => {\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      },\n      (receipt) => {\n        toastSuccess(\n          `${t('Staked')}!`,\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your funds have been staked in the farm')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n      (receipt) => {\n        toastError(\n          t('Error'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n    )\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(\n      amount,\n      (tx) => {\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      },\n      (receipt) => {\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your earnings have also been harvested to your wallet')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n      (receipt) => {\n        toastError(\n          t('Error'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n          </ToastDescriptionWithTx>,\n        )\n      },\n    )\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      sobaPrice={sobaPrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove(\n        (tx) => {\n          toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        },\n        (receipt) => {\n          toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n        },\n        (receipt) => {\n          toastError(\n            t('Error'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n            </ToastDescriptionWithTx>,\n          )\n        },\n      )\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      logError(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError, toastSuccess])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from 'opsoba-uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('SOBA', 'SOBA')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from 'opsoba-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from 'opsoba-uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Flex } from 'opsoba-uikit'\nimport { ChainId } from 'opsoba-sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceSobaBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (sobaRewardsApr?: number, lpRewardsApr?: number) => {\n  if (sobaRewardsApr && lpRewardsApr) {\n    return (sobaRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (sobaRewardsApr) {\n    return sobaRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const sobaPrice = usePriceSobaBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { sobaRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), sobaPrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { sobaRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: sobaRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [sobaPrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('SOBA', 'SOBA')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        sobaPrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              sobaPrice={sobaPrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              sobaPrice={sobaPrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              sobaPrice={sobaPrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}